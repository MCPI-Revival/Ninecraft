name: Ninecraft build

on:
  - workflow_dispatch
  - push
    
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
    build:
      strategy:
          fail-fast: false
          matrix:
              target: [ ubuntu-latest ]
              arch: [i686,arm]
              include:
                - target: windows-latest
                  arch: i686
                  out: portable
      runs-on: ${{matrix.target}}
      container: ${{ matrix.arch == 'arm' && matrix.target == 'ubuntu-latest' && 'debian:bookworm' || null }}
      permissions:
        contents: read 
      steps:
        - uses: actions/checkout@v4
          if: matrix.arch != 'arm' || matrix.target != 'ubuntu-latest'
          with:
            submodules: true



       
        - name: Set up Python
          id: python
          if: matrix.target == 'windows-latest'
          uses: actions/setup-python@v4
          with:
            python-version: '3.11'

        - name: Install Python dependencies
          if: matrix.target == 'windows-latest'
          run: |
            python -m pip install --upgrade pip
            pip install jinja2

        - name: check python
          if: matrix.target == 'windows-latest'
          run: |
            pip list
            pip show jinja2
            python3 -c "import sys; print(sys.path)"
            python3 -c "import jinja2"
        
        - name: Get Debian Architecture
          id: debian
          if: ${{matrix.target == 'ubuntu-latest'}}
          run: |
            if [ "${{ matrix.arch }}" = "i686" ]; then
              echo arch=i386 >> $GITHUB_OUTPUT
            fi
            if [ "${{ matrix.arch }}" = "arm" ]; then
              echo arch=armhf >> $GITHUB_OUTPUT
            fi

        
        - name: Get AppImage Architecture
          id: appimage
          if: ${{matrix.target == 'ubuntu-latest'}}
          run: |
            if [ "${{ matrix.arch }}" = "i686" ]; then
              echo arch=i686 >> $GITHUB_OUTPUT
            fi
            if [ "${{ matrix.arch }}" = "arm" ]; then
              echo arch=armhf >> $GITHUB_OUTPUT
            fi

        - name: Setup APT ${{matrix.arch}}
          if: matrix.target == 'ubuntu-latest'
          run: |
            ${{matrix.arch == 'i686' && 'sudo' || ''}} dpkg --add-architecture ${{steps.debian.outputs.arch}}
            ${{matrix.arch == 'i686' && 'sudo' || ''}} apt update -y
            ${{matrix.arch == 'i686' && 'sudo' || ''}} apt install -y file git pacman-package-manager wget make cmake unzip python3-jinja2 zenity libopenal-dev:${{steps.debian.outputs.arch}} libx11-dev:${{steps.debian.outputs.arch}} libxrandr-dev:${{steps.debian.outputs.arch}} libxinerama-dev:${{steps.debian.outputs.arch}} libxcursor-dev:${{steps.debian.outputs.arch}} libxi-dev:${{steps.debian.outputs.arch}} libgl-dev:${{steps.debian.outputs.arch}} libwayland-dev:${{steps.debian.outputs.arch}} libpulse-dev:${{steps.debian.outputs.arch}} libxkbcommon-dev:${{steps.debian.outputs.arch}} libegl-dev:${{steps.debian.outputs.arch}}
        
        - name: Install GCC-Multilib
          if: ${{matrix.target == 'ubuntu-latest' && matrix.arch == 'i686'}}
          run: ${{matrix.arch == 'i686' && 'sudo' || ''}} apt install -y gcc g++ gcc-multilib g++-multilib

        - name: Install GCC-gnueabihf
          if: ${{matrix.target == 'ubuntu-latest' && matrix.arch == 'arm'}}
          run: ${{matrix.arch == 'i686' && 'sudo' || ''}} apt install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

        - name: Setup AppImageTool
          if: ${{matrix.target == 'ubuntu-latest' }}
          uses: AnimMouse/setup-appimage@v1
          with:
            name: appimagetool
            url: https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage


        - if: matrix.arch == 'arm'
          run: |
            git config --global --add safe.directory /__w/Ninecraft/Ninecraft
            git clone http://github.com/$GITHUB_REPOSITORY . --recursive
            git switch $GITHUB_REF_NAME


        - name: Build ${{matrix.arch}}-linux
          if: matrix.target != 'windows-latest'
          run: make build-${{matrix.arch}}

        - name: Build ${{matrix.arch}}-windows
          if: matrix.target == 'windows-latest'
          run:
            | 
            cmake -B ${{github.workspace}}/build -A Win32 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 
            cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}


        - name: Upload Windows
          uses: actions/upload-artifact@v4
          if: ${{ matrix.target == 'windows-latest' }}
          with:
            name: ninecraft-${{matrix.arch}}-windows
            path: build/${{ env.BUILD_TYPE }}/ninecraft/ninecraft.exe

        - name: Upload Linux
          uses: actions/upload-artifact@v4
          if: ${{matrix.target != 'windows-latest'  }}
          with:
            name: ninecraft-${{matrix.arch}}-linux
            path: build-${{matrix.arch}}/ninecraft/ninecraft
            
        - name: Build Deb
          if: ${{matrix.target == 'ubuntu-latest'  }}
          run: |
            ls -al
            mkdir -p pkgs/deb/usr/bin
            mkdir -p pkgs/deb/usr/share/applications
            ls -al pkgs
            ls -al pkgs/deb
            cp build-${{matrix.arch}}/ninecraft/ninecraft pkgs/deb/usr/bin
            cp tools/extract.sh pkgs/deb/usr/bin/ninecraft-extract
            dpkg-deb -b pkgs/deb

        - name: Upload Deb
          if: ${{matrix.target == 'ubuntu-latest' }}
          uses: actions/upload-artifact@v4
          with:
            name: ninecraft-${{matrix.arch}}-linux.deb
            path: pkgs/deb.deb

        - name: Build AppImage
          if: ${{matrix.target == 'ubuntu-latest' }}
          run: |
              wget https://archive.org/download/MCPEAlpha/PE-a0.6.1-x86.apk
              ./tools/extract.sh ./PE-a0.6.1-x86.apk
              mkdir -p pkgs/appimage/usr/bin
              cp build-${{matrix.arch}}/ninecraft/ninecraft pkgs/appimage/usr/bin
              cp res/drawable/iconx.png pkgs/appimage/ninecraft.png
              ARCH=${{steps.appimage.outputs.arch}} appimagetool ./pkgs/appimage/  

        - name: Upload Appimage
          if: ${{matrix.target == 'ubuntu-latest' }}
          uses: actions/upload-artifact@v4
          with:
            name: ninecraft-${{matrix.arch}}-linux.AppImage
            path: ./*.AppImage


        - name: Build Arch pkg
          if: ${{matrix.target == 'ubuntu-latest'  }}
          run: |
            cp build-${{matrix.arch}}/ninecraft/ninecraft pkgs/arch
            cd pkgs/arch
            makepkg -si --nobuild
        # - name: Build Arch Linux package
        #   uses: FFY00/build-arch-package@v1
        #   with:
        #     PKGBUILD: pkgs/arch/PKGBUILD
        #     OUTDIR: $HOME

        - name: Upload Arch pkg
          if: ${{matrix.target == 'ubuntu-latest' }}
          uses: actions/upload-artifact@v4
          with:
            name: ninecraft-${{matrix.arch}}-linux.pkgs.tar
            path: ninecraft.pkg.tar